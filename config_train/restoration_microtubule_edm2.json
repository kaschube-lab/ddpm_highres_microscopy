{
    "name": "restoration_microtubule", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments/microtubule/edm2", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        // "resume_state": "experiments/train_restoration_microtubule_240613_192757/checkpoint/200" // ex: 100, loading .state  and .pth from given epoch and iteration
        "resume_state": null
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "MicroscopyDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "datasets/microtubule/train",
                    "data_flist": "datatasets/microtubule/train",
                    "data_len": -1,
                    "type": "microtubule"
                } 
            },
            "dataloader":{
                "validation_split": 2, // percent or number 
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 8, // batch size in each gpu
                    "num_workers": 0,
                    "shuffle": false,
                    "pin_memory": false,
                    "drop_last": false
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 10, // batch size in each gpu
                    "num_workers": 0,
                    "shuffle": false,
                    "pin_memory": false,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": "MicroscopyDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "datasets/microtubule/test",
                    "data_flist": "datasets/microtubule/test",
                    "type": "microtubule"
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 8,
                    "num_workers": 0,
                    "pin_memory": false
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "restoration",
                "ema_scheduler": null,
                "optimizers": [
                    { "lr": 2e-4, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "edm2", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 2,
                        "out_channel": 1,
                        "num_blocks": 2,
                        "image_size": 256,
                        "channel_mult": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "model_channels": 64,
                        "dropout": 0.2,
                        "channels_per_head": 32,
                        "attn_resolutions": [16]
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "cosine",
                            "n_timestep": 200
                            // "n_timestep": 5, // debug
                            // "linear_start": 1e-6,
                            // "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "cosine",
                            "n_timestep": 200
                            // "linear_start": 1e-4,
                            // "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae", // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
            "psnr",
            "ms_ssim"
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1e8, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 20, // valdation every specified number of epochs
        "save_checkpoint_epoch": 20,
        "log_iter": 1e4, // log every specified number of iterations
        "tensorboard" : false // tensorboardX enable
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 2,
        "save_checkpoint_epoch": 1,
        "log_iter": 10,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}